prototype(CodeQ.LinkChecker:Component.Links.List) < prototype(Neos.Fusion:Component) {
    links = '[]'

    renderer = afx`
        <table class="neos-table codeq-link-checker-table">
            <thead>
            <tr>
                <th>{I18n.translate('CodeQ.LinkChecker:Modules:domain')}</th>
                <th>{I18n.translate('CodeQ.LinkChecker:Modules:source')} <i class="fas fa-sort-amount-down"></i></th>
                <th>{I18n.translate('CodeQ.LinkChecker:Modules:targetUriPath')}</th>
                <th>{I18n.translate('CodeQ.LinkChecker:Modules:error')}</th>
                <th>{I18n.translate('CodeQ.LinkChecker:Modules:foundAt')}</th>
                <th></th>
            </tr>
            </thead>
            <tbody>
            <Neos.Fusion:Loop items={props.links} itemName="link">
                <CodeQ.LinkChecker:Component.Links.List.Link link={link}/>
            </Neos.Fusion:Loop>
            </tbody>
        </table>
    `
}

prototype(CodeQ.LinkChecker:Component.Links.List.Link) < prototype(Neos.Fusion:Component) {
    link = '{}'

    linkToEditNode = Sitegeist.FusionLinkPrototypes:ActionUri {
        package = 'Neos.Neos.Ui'
        controller = 'Backend'
        action = 'index'
        arguments.node = ${link.source}
    }

    target = Neos.Fusion:Case {
        isNode {
            condition = ${String.startsWith(link.target, 'node://')}

            renderer = Neos.Fusion:UriBuilder {
                package = 'Neos.Neos.Ui'
                controller = 'Backend'
                action = 'index'
                // Please replace with the correct path to node
                arguments.node = ${link.source}
            }
        }

        isResource {
            // tbd
        }

        isExternal {
            condition = ${String.startsWith(link.target, 'http')}

            renderer = ${link.target}
        }

        fallback {
            condition = ${true}
            renderer = '#'
        }
    }

    deleteUri = Neos.Fusion:UriBuilder {
        action = 'delete'
        arguments.resultItem = ${link}
    }
    ignoreUri = Neos.Fusion:UriBuilder {
        action = 'ignore'
        arguments.resultItem = ${link}
    }

    renderer = afx`
        <tr>
            <td>{link.domain}</td>
            <td>
                {link.source}
                <a href={props.linkToEditNode} target="_blank" class="neos-button neos-button--small">
                    <i class="fas fa-edit"></i>
                </a>
                <a href={link.source} target="_blank" class="neos-button neos-button--small">
                    <i class="fas fa-external-link-alt"></i>
                </a>
            </td>
            <td>
                <a href={props.target} target="_blank" class="neos-button target-page-button">{link.target} <i class="fas fa-external-link-alt"></i></a>
            </td>
            <td>{I18n.translate('CodeQ.LinkChecker:Modules:error.' + link.statusCode)}</td>
            <td>{Date.format(link.checkedAt, 'd.m.Y H:i')}</td>
            <td class="neos-action">
                <div class="neos-pull-right">
                    <Neos.Fusion.Form:Form form.target={props.deleteUri} attributes.class="neos-inline">
                        <Neos.Fusion.Form:Button
                            attributes.title={I18n.translate('CodeQ.LinkChecker:Modules:list.action.delete')}
                        >
                            <i class="fas fa-check"></i>
                        </Neos.Fusion.Form:Button>
                    </Neos.Fusion.Form:Form>

                    <Neos.Fusion.Form:Form form.target={props.ignoreUri} attributes.class="neos-inline">
                        <Neos.Fusion.Form:Button
                            attributes.title={I18n.translate('CodeQ.LinkChecker:Modules:list.action.ignore')}
                        >
                            <i class="fas fa-eye-slash"></i>
                        </Neos.Fusion.Form:Button>
                    </Neos.Fusion.Form:Form>
                </div>
            </td>
        </tr>
    `
}
